/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __EXECVE_COUNTER_BPF_SKEL_H__
#define __EXECVE_COUNTER_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct execve_counter_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *execve_counter;
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *bpf_prog;
	} progs;
	struct {
		struct bpf_link *bpf_prog;
	} links;

#ifdef __cplusplus
	static inline struct execve_counter_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct execve_counter_bpf *open_and_load();
	static inline int load(struct execve_counter_bpf *skel);
	static inline int attach(struct execve_counter_bpf *skel);
	static inline void detach(struct execve_counter_bpf *skel);
	static inline void destroy(struct execve_counter_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
execve_counter_bpf__destroy(struct execve_counter_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
execve_counter_bpf__create_skeleton(struct execve_counter_bpf *obj);

static inline struct execve_counter_bpf *
execve_counter_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct execve_counter_bpf *obj;
	int err;

	obj = (struct execve_counter_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = execve_counter_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	execve_counter_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct execve_counter_bpf *
execve_counter_bpf__open(void)
{
	return execve_counter_bpf__open_opts(NULL);
}

static inline int
execve_counter_bpf__load(struct execve_counter_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct execve_counter_bpf *
execve_counter_bpf__open_and_load(void)
{
	struct execve_counter_bpf *obj;
	int err;

	obj = execve_counter_bpf__open();
	if (!obj)
		return NULL;
	err = execve_counter_bpf__load(obj);
	if (err) {
		execve_counter_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
execve_counter_bpf__attach(struct execve_counter_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
execve_counter_bpf__detach(struct execve_counter_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *execve_counter_bpf__elf_bytes(size_t *sz);

static inline int
execve_counter_bpf__create_skeleton(struct execve_counter_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "execve_counter_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "execve_counter";
	s->maps[0].map = &obj->maps.execve_counter;

	s->maps[1].name = "execve_c.rodata";
	s->maps[1].map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "bpf_prog";
	s->progs[0].prog = &obj->progs.bpf_prog;
	s->progs[0].link = &obj->links.bpf_prog;

	s->data = execve_counter_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *execve_counter_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xb8\x0e\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x17\0\
\x01\0\xb7\x01\0\0\0\0\0\0\x7b\x1a\xf8\xff\0\0\0\0\x7b\x1a\xf0\xff\0\0\0\0\x7b\
\x1a\xe8\xff\0\0\0\0\x7b\x1a\xe0\xff\0\0\0\0\x7b\x1a\xd8\xff\0\0\0\0\x7b\x1a\
\xd0\xff\0\0\0\0\x18\x01\0\0\x6f\x75\x6e\x74\0\0\0\0\x65\x72\0\0\x7b\x1a\xc8\
\xff\0\0\0\0\x18\x01\0\0\x65\x78\x65\x63\0\0\0\0\x76\x65\x5f\x63\x7b\x1a\xc0\
\xff\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xc0\xff\xff\xff\x18\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x15\0\x03\0\0\0\0\0\x79\x01\0\0\0\0\0\0\
\x07\x01\0\0\x01\0\0\0\x7b\x10\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\
\x65\x78\x65\x63\x76\x65\x5f\x63\x6f\x75\x6e\x74\x65\x72\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x44\x75\x61\
\x6c\x20\x42\x53\x44\x2f\x47\x50\x4c\0\x68\0\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\x02\
\0\x30\x9f\x90\0\0\0\0\0\0\0\xb8\0\0\0\0\0\0\0\x01\0\x50\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x01\x11\x01\x25\x0e\x13\x05\x03\x0e\x10\x17\x1b\x0e\x11\x01\x12\x06\
\0\0\x02\x34\0\x03\x0e\x49\x13\x3a\x0b\x3b\x0b\0\0\x03\x26\0\x49\x13\0\0\x04\
\x0f\0\x49\x13\0\0\x05\x15\x01\x49\x13\x27\x19\0\0\x06\x05\0\x49\x13\0\0\x07\
\x0f\0\0\0\x08\x26\0\0\0\x09\x34\0\x03\x0e\x49\x13\x3f\x19\x3a\x0b\x3b\x0b\x02\
\x18\0\0\x0a\x01\x01\x49\x13\0\0\x0b\x21\0\x49\x13\x37\x0b\0\0\x0c\x24\0\x03\
\x0e\x3e\x0b\x0b\x0b\0\0\x0d\x24\0\x03\x0e\x0b\x0b\x3e\x0b\0\0\x0e\x13\x01\x0b\
\x0b\x3a\x0b\x3b\x0b\0\0\x0f\x0d\0\x03\x0e\x49\x13\x3a\x0b\x3b\x0b\x38\x0b\0\0\
\x10\x16\0\x49\x13\x03\x0e\x3a\x0b\x3b\x0b\0\0\x11\x2e\x01\x11\x01\x12\x06\x40\
\x18\x97\x42\x19\x03\x0e\x3a\x0b\x3b\x0b\x27\x19\x49\x13\x3f\x19\0\0\x12\x05\0\
\x03\x0e\x3a\x0b\x3b\x0b\x49\x13\0\0\x13\x34\0\x02\x18\x03\x0e\x3a\x0b\x3b\x0b\
\x49\x13\0\0\x14\x34\0\x02\x17\x03\x0e\x3a\x0b\x3b\x0b\x49\x13\0\0\0\x75\x01\0\
\0\x04\0\0\0\0\0\x08\x01\0\0\0\0\x1d\0\x2c\0\0\0\0\0\0\0\x41\0\0\0\0\0\0\0\0\0\
\0\0\xc0\0\0\0\x02\x69\0\0\0\x35\0\0\0\x01\x38\x03\x3a\0\0\0\x04\x3f\0\0\0\x05\
\x4f\0\0\0\x06\x4f\0\0\0\x06\x50\0\0\0\0\x07\x04\x55\0\0\0\x08\x09\x7d\0\0\0\
\x6b\0\0\0\x02\x1a\x09\x03\0\0\0\0\0\0\0\0\x0a\x77\0\0\0\x0b\x7e\0\0\0\x0d\0\
\x0c\x85\0\0\0\x06\x01\x0d\x8a\0\0\0\x08\x07\x09\x9e\0\0\0\x9a\0\0\0\x02\x0c\
\x09\x03\0\0\0\0\0\0\0\0\x0e\x20\x02\x07\x0f\xad\0\0\0\xcf\0\0\0\x02\x08\0\x0f\
\xb6\0\0\0\xe7\0\0\0\x02\x09\x08\x0f\xc2\0\0\0\xf8\0\0\0\x02\x0a\x10\x0f\xd0\0\
\0\0\x14\x01\0\0\x02\x0b\x18\0\x04\xd4\0\0\0\x0a\xe0\0\0\0\x0b\x7e\0\0\0\x01\0\
\x0c\xb2\0\0\0\x05\x04\x04\xec\0\0\0\x0a\xe0\0\0\0\x0b\x7e\0\0\0\x80\0\x04\xfd\
\0\0\0\x10\x08\x01\0\0\xc6\0\0\0\x02\x05\x0a\x77\0\0\0\x0b\x7e\0\0\0\x40\0\x04\
\x19\x01\0\0\x10\x24\x01\0\0\xef\0\0\0\x02\x04\x10\x2f\x01\0\0\xe9\0\0\0\x03\
\x1f\x0c\xd6\0\0\0\x07\x08\x11\0\0\0\0\0\0\0\0\xc0\0\0\0\x01\x5a\xf3\0\0\0\x02\
\x0f\xe0\0\0\0\x12\xfe\0\0\0\x02\x0f\x4f\0\0\0\x13\x02\x91\0\xc2\0\0\0\x02\x11\
\xfd\0\0\0\x14\0\0\0\0\xfc\0\0\0\x02\x12\x14\x01\0\0\0\0\x63\x6c\x61\x6e\x67\
\x20\x76\x65\x72\x73\x69\x6f\x6e\x20\x31\x37\x2e\x30\x2e\x36\x20\x28\x46\x65\
\x64\x6f\x72\x61\x20\x31\x37\x2e\x30\x2e\x36\x2d\x32\x2e\x66\x63\x33\x39\x29\0\
\x65\x78\x65\x63\x76\x65\x5f\x63\x6f\x75\x6e\x74\x65\x72\x2e\x62\x70\x66\x2e\
\x63\0\x2f\x72\x6f\x6f\x74\x2f\x65\x78\x70\x65\x72\x69\x6d\x65\x6e\x74\x73\x2f\
\x65\x62\x70\x66\x2f\x63\x2f\x65\x78\x65\x63\x76\x65\x5f\x63\x6f\x75\x6e\x74\
\x65\x72\0\x62\x70\x66\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\
\x65\x6d\0\x4c\x49\x43\x45\x4e\x53\x45\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\
\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x65\x78\x65\x63\x76\
\x65\x5f\x63\x6f\x75\x6e\x74\x65\x72\0\x74\x79\x70\x65\0\x69\x6e\x74\0\x6d\x61\
\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x6b\x65\x79\0\x73\x74\x72\x69\x6e\x67\
\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\
\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x5f\x5f\x75\x36\x34\0\x75\x36\x34\0\x62\x70\
\x66\x5f\x70\x72\x6f\x67\0\x76\0\x63\x74\x78\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\
\0\xb8\x01\0\0\xb8\x01\0\0\x95\x01\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\
\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\
\x01\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\
\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\x02\x08\
\0\0\0\x19\0\0\0\0\0\0\x08\x0a\0\0\0\x23\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\
\0\0\0\0\0\0\0\x03\0\0\0\0\x09\0\0\0\x04\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\x02\x0c\
\0\0\0\x28\0\0\0\0\0\0\x08\x0d\0\0\0\x2c\0\0\0\0\0\0\x08\x0e\0\0\0\x32\0\0\0\0\
\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x45\0\0\0\x01\0\0\0\
\0\0\0\0\x4a\0\0\0\x05\0\0\0\x40\0\0\0\x56\0\0\0\x07\0\0\0\x80\0\0\0\x5a\0\0\0\
\x0b\0\0\0\xc0\0\0\0\x60\0\0\0\0\0\0\x0e\x0f\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\
\0\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x6f\0\0\0\x11\0\0\0\x73\0\0\0\x01\0\0\
\x0c\x12\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x09\0\0\0\x04\0\0\0\x0d\0\0\0\x77\x01\
\0\0\0\0\0\x0e\x14\0\0\0\x01\0\0\0\x7f\x01\0\0\x01\0\0\x0f\0\0\0\0\x10\0\0\0\0\
\0\0\0\x20\0\0\0\x85\x01\0\0\0\0\0\x0f\0\0\0\0\x8d\x01\0\0\x01\0\0\x0f\0\0\0\0\
\x15\0\0\0\0\0\0\0\x0d\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\
\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x73\x74\x72\x69\x6e\x67\x6b\x65\
\x79\0\x63\x68\x61\x72\0\x75\x36\x34\0\x5f\x5f\x75\x36\x34\0\x75\x6e\x73\x69\
\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x74\x79\x70\x65\0\
\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x6b\x65\x79\0\x76\x61\x6c\x75\
\x65\0\x65\x78\x65\x63\x76\x65\x5f\x63\x6f\x75\x6e\x74\x65\x72\0\x63\x74\x78\0\
\x62\x70\x66\x5f\x70\x72\x6f\x67\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\
\x73\x79\x73\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\
\x65\x78\x65\x63\x76\x65\0\x2f\x72\x6f\x6f\x74\x2f\x65\x78\x70\x65\x72\x69\x6d\
\x65\x6e\x74\x73\x2f\x65\x62\x70\x66\x2f\x63\x2f\x65\x78\x65\x63\x76\x65\x5f\
\x63\x6f\x75\x6e\x74\x65\x72\x2f\x65\x78\x65\x63\x76\x65\x5f\x63\x6f\x75\x6e\
\x74\x65\x72\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\x62\x70\x66\x5f\x70\x72\
\x6f\x67\x28\x76\x6f\x69\x64\x20\x2a\x63\x74\x78\x29\0\x20\x20\x73\x74\x72\x69\
\x6e\x67\x6b\x65\x79\x20\x6b\x65\x79\x20\x3d\x20\x22\x65\x78\x65\x63\x76\x65\
\x5f\x63\x6f\x75\x6e\x74\x65\x72\x22\x3b\0\x20\x20\x76\x20\x3d\x20\x62\x70\x66\
\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x65\
\x78\x65\x63\x76\x65\x5f\x63\x6f\x75\x6e\x74\x65\x72\x2c\x20\x26\x6b\x65\x79\
\x29\x3b\0\x20\x20\x69\x66\x20\x28\x76\x20\x21\x3d\x20\x4e\x55\x4c\x4c\x29\x7b\
\0\x20\x20\x20\x20\x2a\x76\x20\x2b\x3d\x20\x31\x3b\0\x20\x20\x72\x65\x74\x75\
\x72\x6e\x20\x30\x3b\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x6d\x61\x70\x73\0\x2e\
\x72\x6f\x64\x61\x74\x61\0\x6c\x69\x63\x65\x6e\x73\x65\0\0\0\0\x9f\xeb\x01\0\
\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x6c\0\0\0\x80\0\0\0\0\0\0\0\x08\0\0\0\
\x7c\0\0\0\x01\0\0\0\0\0\0\0\x13\0\0\0\x10\0\0\0\x7c\0\0\0\x06\0\0\0\0\0\0\0\
\xa1\0\0\0\xde\0\0\0\0\x3c\0\0\x08\0\0\0\xa1\0\0\0\xf6\0\0\0\x0d\x44\0\0\x78\0\
\0\0\xa1\0\0\0\x1a\x01\0\0\x07\x4c\0\0\x90\0\0\0\xa1\0\0\0\x4c\x01\0\0\x07\x50\
\0\0\x98\0\0\0\xa1\0\0\0\x5e\x01\0\0\x08\x54\0\0\xb0\0\0\0\xa1\0\0\0\x6b\x01\0\
\0\x03\x5c\0\0\0\0\0\0\x0c\0\0\0\xff\xff\xff\xff\x04\0\x08\0\x08\x7c\x0b\0\x14\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\xb4\0\0\0\x04\0\x83\0\0\0\x08\
\x01\x01\xfb\x0e\x0d\0\x01\x01\x01\x01\0\0\0\x01\0\0\x01\x2f\x75\x73\x72\x2f\
\x6c\x6f\x63\x61\x6c\x2f\x62\x70\x66\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\x62\
\x70\x66\0\x2f\x75\x73\x72\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\x61\x73\x6d\x2d\
\x67\x65\x6e\x65\x72\x69\x63\0\0\x62\x70\x66\x5f\x68\x65\x6c\x70\x65\x72\x5f\
\x64\x65\x66\x73\x2e\x68\0\x01\0\0\x65\x78\x65\x63\x76\x65\x5f\x63\x6f\x75\x6e\
\x74\x65\x72\x2e\x62\x70\x66\x2e\x63\0\0\0\0\x69\x6e\x74\x2d\x6c\x6c\x36\x34\
\x2e\x68\0\x02\0\0\0\x04\x02\0\x09\x02\0\0\0\0\0\0\0\0\x03\x0f\x01\x05\x0d\x0a\
\x21\x06\x03\x6f\xba\x03\x11\x20\x05\x07\x06\x22\x3d\x05\x08\x21\x05\x03\x3e\
\x02\x02\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc6\0\0\0\
\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x04\x01\0\0\0\0\x03\0\xb0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x03\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x09\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x03\0\x11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x13\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x52\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\xc0\0\0\0\0\0\0\
\0\x33\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\xfc\0\0\0\x11\0\x07\
\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\x78\0\0\0\0\0\0\0\x01\0\0\0\x0a\0\0\0\x06\
\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x0c\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x12\0\
\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x16\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x1a\0\0\
\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x1e\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x2b\0\0\0\
\0\0\0\0\x03\0\0\0\x06\0\0\0\x57\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x63\0\0\0\0\
\0\0\0\x02\0\0\0\x0b\0\0\0\x78\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x7f\0\0\0\0\0\
\0\0\x03\0\0\0\x06\0\0\0\x86\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x92\0\0\0\0\0\0\
\0\x02\0\0\0\x0a\0\0\0\x9f\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\xab\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\xc3\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\xe1\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x02\x01\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x1e\x01\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x29\x01\0\0\0\0\0\
\0\x03\0\0\0\x06\0\0\0\x30\x01\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x37\x01\0\0\0\0\
\0\0\x02\0\0\0\x02\0\0\0\x45\x01\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x50\x01\0\0\0\
\0\0\0\x03\0\0\0\x06\0\0\0\x5e\x01\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x69\x01\0\0\
\0\0\0\0\x03\0\0\0\x04\0\0\0\x6d\x01\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\xa4\x01\0\
\0\0\0\0\0\x04\0\0\0\x0a\0\0\0\xc8\x01\0\0\0\0\0\0\x04\0\0\0\x0b\0\0\0\x2c\0\0\
\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x50\0\0\0\
\0\0\0\0\x04\0\0\0\x02\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x70\0\0\0\0\
\0\0\0\x04\0\0\0\x02\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x90\0\0\0\0\0\
\0\0\x04\0\0\0\x02\0\0\0\x14\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x18\0\0\0\0\0\0\
\0\x02\0\0\0\x02\0\0\0\x92\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x09\x0a\x0b\0\x2e\
\x64\x65\x62\x75\x67\x5f\x61\x62\x62\x72\x65\x76\0\x2e\x74\x65\x78\x74\0\x2e\
\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x2e\x6d\x61\x70\x73\0\x2e\x64\
\x65\x62\x75\x67\x5f\x73\x74\x72\0\x65\x78\x65\x63\x76\x65\x5f\x63\x6f\x75\x6e\
\x74\x65\x72\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x69\x6e\x66\x6f\0\
\x62\x70\x66\x5f\x70\x72\x6f\x67\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\
\x69\x67\0\x2e\x72\x65\x6c\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\x79\
\x73\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x65\x78\
\x65\x63\x76\x65\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\
\x62\x75\x67\x5f\x6c\x69\x6e\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\
\x66\x72\x61\x6d\x65\0\x2e\x64\x65\x62\x75\x67\x5f\x6c\x6f\x63\0\x65\x78\x65\
\x63\x76\x65\x5f\x63\x6f\x75\x6e\x74\x65\x72\x2e\x62\x70\x66\x2e\x63\0\x2e\x73\
\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x6f\x64\x61\x74\
\x61\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\x4c\x42\
\x42\x30\x5f\x32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\0\
\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xab\x0d\0\0\0\0\0\0\x0b\x01\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\
\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6d\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x69\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x18\x0b\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x16\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\xeb\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x22\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\x01\0\0\0\0\0\0\
\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\0\0\0\
\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\x01\0\0\0\0\0\0\x0d\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbb\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6d\x01\0\0\0\0\0\0\x37\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xa4\x01\0\0\0\0\0\0\xec\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x46\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\
\x02\0\0\0\0\0\0\x79\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x42\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\x0b\0\0\0\0\
\0\0\xc0\x01\0\0\0\0\0\0\x16\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\x28\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\x04\0\0\0\0\0\0\
\x02\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\xf7\0\
\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0c\x05\0\0\0\0\0\0\x65\x03\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf3\0\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x0c\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x16\0\
\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x74\x08\0\0\0\0\0\0\xa0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x08\x0d\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\x16\0\0\0\x0f\0\0\0\x08\0\0\0\
\0\0\0\0\x10\0\0\0\0\0\0\0\xae\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x18\x09\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xaa\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x78\x0d\0\0\0\
\0\0\0\x20\0\0\0\0\0\0\0\x16\0\0\0\x11\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\x9e\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\x09\0\0\0\0\0\0\xb8\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9a\0\0\0\x09\
\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\x0d\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\x16\0\0\0\x13\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x5b\0\0\0\x03\x4c\xff\
\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xa8\x0d\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\
\x16\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe3\0\0\0\x02\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xf8\x09\0\0\0\0\0\0\x20\x01\0\0\0\0\0\0\x01\0\0\0\
\x09\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct execve_counter_bpf *execve_counter_bpf::open(const struct bpf_object_open_opts *opts) { return execve_counter_bpf__open_opts(opts); }
struct execve_counter_bpf *execve_counter_bpf::open_and_load() { return execve_counter_bpf__open_and_load(); }
int execve_counter_bpf::load(struct execve_counter_bpf *skel) { return execve_counter_bpf__load(skel); }
int execve_counter_bpf::attach(struct execve_counter_bpf *skel) { return execve_counter_bpf__attach(skel); }
void execve_counter_bpf::detach(struct execve_counter_bpf *skel) { execve_counter_bpf__detach(skel); }
void execve_counter_bpf::destroy(struct execve_counter_bpf *skel) { execve_counter_bpf__destroy(skel); }
const void *execve_counter_bpf::elf_bytes(size_t *sz) { return execve_counter_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
execve_counter_bpf__assert(struct execve_counter_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __EXECVE_COUNTER_BPF_SKEL_H__ */
